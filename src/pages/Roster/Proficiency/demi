import React , { useEffect, useState } from "react";
import { Link, useHistory } from "react-router-dom";
function DynamicTable(props){
// debugger
   let {studentsList ,rosterData ,totalLearningTargets} = props;
   let totalColoums =  rosterData.learningTargetTo  - rosterData.learningTargetFrom + 1;
// get table column
 const [column , setColumns]= useState(totalColoums);
 const [students , setstudentsList] = useState([]);
 useEffect(()=>{
  setstudentsList(studentsList);
//  totalLearningTargets.length && 
 },[props])
 // get table heading data


const RostersTabledata = (studentData)=>{
 // debugger
let stdtData  = students.find((element)=>element.id === studentData.id)
if(stdtData){
 // let rsterData = props.NewRoster.find((element)=>element.id === studentData.rosterId);
  return stdtData;
}
return null;
 
}

 const ThData =()=>{
    
     return(
        <>




        {totalLearningTargets.length ? (
          <>
          <th key="fullName"></th>
          {        totalLearningTargets.map((data ,key)=>{
                  
            return <th  key={data.learningTarget }>{data.learningTarget}</th>
        })}
        {        [...Array(column)].map((data ,key)=>{
                  
          return <th  key={rosterData.learningTargetFrom + key}>{rosterData.learningTargetFrom + key}</th>
      })}
        </>
        ) : (
          <>
          <th key="fullName"></th>
          {        [...Array(column)].map((data ,key)=>{
                  
            return <th  key={rosterData.learningTargetFrom + key}>{rosterData.learningTargetFrom + key}</th>
        })}
        </>
        )}
        </>

     )
 }
 console.log(rosterData.id)
// get table row data
const tdData =() =>{
   
     return students.map((student)=>{

        let completedTarget = student.completedTarget.split(",")
        const myData = (learnTarget )=>{
            let index = completedTarget.findIndex(
                data => parseInt(data) === learnTarget,
              )
              if(index > -1){
                  return "P"
              }else{
                //debugger
                  if(student.inProgressTarget === learnTarget){
                    return 'IP'
                  }else{
                      return ''
                  }
                  
              }
            
        }
       return(
           <tr style={{borderBottom: "1px solid #e8e8e8",color:"333",fontSize:"13px"}}>
           {rosterData.advisory ?
           ( <Link 
                  to={{
                    pathname: "/student-timeline",
                    state: {
                    studentId: student.id,
                    studentName: student.firstName + student.lastName,
                    },
                }}
                 > <td>{student.firstName} {student.lastName} </td> 
            </Link> ): <td>{student.firstName} {student.lastName} </td> }
{            totalLearningTargets.map((data , key)=>{
              return(
                <>
                {props.commonStudentsList.length > 0 && props.commonStudentsList.map((data , i)=>{

                  return(
                    <>
                    {data.map((d)=>{
                     let studdata = RostersTabledata(d)
                      return(
                        <>
                        <td style={{textAlign: 'left'}}>
                     {  studdata === null ? "" :   
                     ( <Link className='link-text'  style={{backgroundColor: myData(key + props.NewRoster[i].learningTargetFrom ) === "P" ? "#b8fcc5" : '#e8e8e8'}}
                     to={{
                         pathname: "/proficiency",
                         state: {
                         studentId: d.id,
                         studentName: d.firstName + " "+ d.lastName,
                         subject: props.NewRoster[i].subject,
                         phase: props.NewRoster[i].phase,
                         categoryId:props.NewRoster[i].categoryId,
                         category:props.NewRoster[i].category,
                         learningTarget: key + props.NewRoster[i].learningTargetFrom  ,
                         status:myData( props.NewRoster[i].learningTargetFrom ),
                         rosterId:props.NewRoster[i].id
                         },
                     }}
                     >
                     {myData(key + props.NewRoster[i].learningTargetFrom ) }
                     </Link> )}
                   </td>
                        </>)
                    })}
                  </>)
                })}
                  
               
                </>
                )
            })}
           
                {
                 
                    [...Array(column)].map((data , key)=>{
                       return (
                           <>
                        
                           <td style={{textAlign: 'left'}}>
                                 <Link className='link-text'  style={{backgroundColor: myData(key + rosterData.learningTargetFrom ) === "P" ? "#b8fcc5" : '#e8e8e8'}}
                                        to={{
                                            pathname: "/proficiency",
                                            state: {
                                            studentId: student.id,
                                            studentName: student.firstName + student.lastName,
                                            subject: rosterData.subject,
                                            phase: rosterData.phase,
                                            categoryId:rosterData.categoryId,
                                            category:rosterData.category,
                                            learningTarget:key + rosterData.learningTargetFrom ,
                                            status:myData(key + rosterData.learningTargetFrom ),
                                            rosterId:rosterData.id
                                            },
                                        }}
                                        >
                                        {myData(key + rosterData.learningTargetFrom ) }
                                        </Link>
                            </td>
                           </>
                           )
                   })
                }
           </tr>
       )
     })
}
  return (
    <div className="grand-total-bx " style={{textAlign: 'left',overflowX:"auto",overflowY:"hidden"}}>
    <table style={{borderCollapse: "collapse",
  borderSpacing: "0",
  width: "100%",
  border: "1px solid #ddd"}}>
        <thead> 
         <tr >{ThData()}</tr>
        </thead>
        <tbody style={{borderBottom: "1px solid #e8e8e8",color:"333",fontSize:"13px"}}>
        {tdData()}
        </tbody>
       </table>
       </div>
  )
}
export default DynamicTable;